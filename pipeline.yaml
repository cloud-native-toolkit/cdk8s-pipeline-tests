apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cdk8s-pipelines-testing-v2
spec:
  workspaces:
  - name: project
  params:
  - name: GIT_SOURCE_URL
    type: string
    default: https://github.com/cloud-native-toolkit/cdk8s-pipelines
    description: Source code repository
  - name: GIT_SOURCE_REVISION
    type: string
    default: develop
    description: Branch to be used
  - name: GIT_TEST_URL 
    type: string
    default: https://github.com/cloud-native-toolkit/cdk8s-pipeline-tests
    description: Test file repository
  - name: GIT_TEST_REVISION
    type: string
    default: test
    description: Branch with test file to run
  - name: namespace
    type: string
    description: Namespace to apply the generated test yaml files
    default: cdk8s-test
  - name: timelimit
    type: string
    description: Time limit, in minutes, for test pods to complete
    default: '15'
  - name: pushedrepo
    type: string
    description: Name of repository whose push event triggered the pipeline
    default: ''

  tasks:
  - name: fetch-source
    taskRef: 
      name: git-clone
      kind: ClusterTask
    params:
      - name: url
        value: $(params.GIT_SOURCE_URL)
      - name: revision
        value: $(params.GIT_SOURCE_REVISION)
    workspaces:
      - name: output
        workspace: project
  
  - name: fetch-test
    taskRef: 
      name: git-clone
      kind: ClusterTask
    runAfter:
      - fetch-source
    params:
      - name: url
        value: $(params.GIT_TEST_URL)
      - name: revision
        value: $(params.GIT_TEST_REVISION)
      - name: deleteExisting
        value: "false"
      - name: subdirectory
        value: "test"
    workspaces:
      - name: output
        workspace: project

  - name: build
    taskRef:
      name: build-and-synth
      kind: Task
    runAfter:
      - fetch-test
    params:
      - name: version
        value: "18.18.0"
    workspaces:
      - name: source
        workspace: project 

  - name: deploy-cdk8s-test
    runAfter:
      - build
    when:
      - input: "$(tasks.build.results.build-status)"
        operator: in
        values: ["Synth Succeeded"]
    params:
      - name: namespace
        value: "$(params.namespace)"
    taskSpec:
      params:
        - name: namespace
      steps:
        - name: oc-create
          image: quay.io/ibmtz/ibm-pak-ubi:latest
          workingdir: /workspace/ws
          script: |
            #!/usr/bin/env bash

            cd dist
            oc create namespace $(params.namespace) >/dev/null
            oc project $(params.namespace)
            oc apply -f '*.yaml'
    workspaces:
      - name: ws
        workspace: project
  
  - name: wait-for-deploy
    runAfter:
      - deploy-cdk8s-test
    when:
      - input: "$(tasks.build.results.build-status)"
        operator: in
        values: ["Synth Succeeded"]
    params:
      - name: namespace
        value: "$(params.namespace)"
      - name: timelimit
        value: $(params.timelimit)
    taskSpec:
      params: 
       - name: namespace
       - name: timelimit
      steps:
        - name: check-pods
          image: quay.io/ibmtz/ibm-pak-ubi:latest
          workingdir: /workspace/ws
          script: |
            #!/usr/bin/env bash
            oc project $(params.namespace)
            echo "waiting for test pods to complete..."

            for (( n = 1; n <= $(($(params.timelimit))); n++ )) ; do
              # gets status of pipelineruns, if any
              pipelineruns=$(oc get pipelinerun -n $(params.namespace) -o jsonpath='{.items[*].status.conditions[0].status}')
              if [[ $pipelineruns =~ "False" || $pipelineruns =~ "Unknown" ]]; then
                echo "At least one PipelineRun failed!"
                echo "Printing reason and message..."
                oc get pipelinerun -n $(params.namespace) -o jsonpath='{range .items[*]}{.status.conditions[0].reason}{"\n"}{end}'
                oc get pipelinerun -n $(params.namespace) -o jsonpath='{range .items[*]}{.status.conditions[0].message}{"\n"}{end}'
                exit 1
              fi

              # gets status of taskruns, if any
              taskruns=$(oc get taskrun -n $(params.namespace) -o jsonpath='{.items[*].status.conditions[0].status}')
              if [[ $taskruns =~ "False" || $taskruns =~ "Unknown" ]]; then
                echo "At least one TaskRun failed!"
                echo "Printing reason and message..."
                oc get taskrun -n $(params.namespace) -o jsonpath='{range .items[*]}{.status.conditions[0].reason}{"\n"}{end}'
                oc get taskrun -n $(params.namespace) -o jsonpath='{range .items[*]}{.status.conditions[0].message}{"\n"}{end}'
                exit 1
              fi

              # gets status of current pods as array of strings
              pods=()
              phases=()
              while IFS= read -r line; do
                  read -ra arr <<<"$line"
                  pods+=("${arr[0]}")
                  phases+=("${arr[1]}")
              done < <(oc get pods -n $(params.namespace) -o custom-columns="POD:metadata.name,PHASE:status.phase" --no-headers)

              COMPLETION=1
              for key in "${!phases[@]}"; do
                  if [ "${phases[$key]}" == "Failed" ]; then
                      echo "Pod '${pods[$key]}' has status 'Failed'... printing logs and exiting"
                      oc logs ${pods[$key]} --all-containers
                      exit 1
                  elif [ "${phases[$key]}" == "Succeeded" ]; then
                      echo "Pod '${pods[$key]}' has status 'Succeeded'."
                  else
                      COMPLETION=0
                  fi
              done
              
              if [ "$COMPLETION" == '1' ]; then
                  echo "All test pods succeeded!"
                  # oc label pods --all app=test >/dev/null
                  # oc logs -l app=test --all-containers --prefix
                  for name in "${pods[@]}"; do
                    echo "Printing logs for pod $name ..."
                    oc logs $name --all-containers
                    echo
                  done
                  exit 0
              fi
              echo "At least one pod has not completed ... checking again in one minute"
              sleep 60
            done
            oc get pod
            echo "At least one pod did not complete in $(params.timelimit) minutes ... exiting"
            exit 1
            
  
  finally:
    - name: early-exit
      params: 
        - name: namespace
          value: "$(params.namespace)"
        - name: repo
          value: "$(params.pushedrepo)"
      when:
        - input: "$(tasks.build.results.build-status)"
          operator: in
          values: ["Synth Failed"]
      taskSpec:
        params:
          - name: namespace
          - name: repo
        steps:
          - name: clean
            image: quay.io/ibmtz/ibm-pak-ubi:latest
            workingdir: /workspace/ws
            script: |
              #!/usr/bin/env bash

              rm -r *

              [ -n "$(params.repo)" ] && echo "Push to $(params.repo) resulted in failed cdk8s synth."
              echo "No manifests generated, pipeline exiting."
      workspaces:
      - name: ws
        workspace: project

    - name: cleanup
      params: 
        - name: namespace
          value: "$(params.namespace)"
        - name: deployStatus
          value: "$(tasks.wait-for-deploy.status)"
        - name: repo
          value: "$(params.pushedrepo)"
      when:
        - input: "$(tasks.build.results.build-status)"
          operator: in
          values: ["Synth Succeeded"]
      taskSpec:
        params:
          - name: namespace
          - name: deployStatus
          - name: repo
        steps:
          - name: script
            image: quay.io/ibmtz/ibm-pak-ubi:latest
            workingdir: /workspace/ws
            script: |
              #!/usr/bin/env bash
              
              [ -n "$(params.repo)" ] && echo "Results from push to $(params.repo):"
              if [ "$(params.deployStatus)" = "Succeeded" ]; then
                echo "Tests were deployed and completed successfully."
              else
                echo "At least one test failed or timed out. See task logs for details."
              fi

              oc delete project $(params.namespace)
              sleep 180

              rm -r *

              echo "Clean up complete"
      workspaces:
      - name: ws
        workspace: project
  